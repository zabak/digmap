package pt.utl.ist.lucene.utils;

import org.apache.log4j.Logger;
import org.dom4j.DocumentException;
import pt.utl.ist.lucene.utils.temporal.TimeExpression;
import pt.utl.ist.lucene.utils.temporal.tides.TimexesDocument;
import pt.utl.ist.lucene.utils.temporal.tides.Timex2TimeExpression;
import pt.utl.ist.lucene.utils.nlp.SentenceSpliter;
import pt.utl.ist.lucene.utils.placemaker.PlaceMakerDocument;
import pt.utl.ist.lucene.treceval.geotime.NyTimesDocument;

import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

/**
 * @author Jorge Machado
 * @date 28/Dez/2009
 * @time 16:54:03
 * @email machadofisher@gmail.com
 */
public class DocumentPlaceMakerAndTemporalSentences {

    private static Logger logger = Logger.getLogger(DocumentPlaceMakerAndTemporalSentences.class);

    NyTimesDocument document;
    String text;
    List<PlaceMakerAndTemporalSentence> placemakerTemporalSentences;
    TimexesDocument timexesDocument;
    PlaceMakerDocument placeMakerDocument;

    TimeExpression documentDate;

    /**
     * Creates a List of sentences with time expressions
     * @param document
     * @param timexesDocument document with timexes generated by ILPS TIMEXTAG using TIDES notation
     * @see "http://fofoca.mitre.org/annotation_guidelines/2005_timex2_standard_v1.1.pdf"
     */
    public DocumentPlaceMakerAndTemporalSentences(NyTimesDocument document,  TimexesDocument timexesDocument, PlaceMakerDocument placeMakerDocument)
    {
        init(document,timexesDocument,placeMakerDocument);
    }

    public DocumentPlaceMakerAndTemporalSentences(NyTimesDocument document,  String timexesXml,String placeMakerDocumentXml) throws DocumentException
    {
        TimexesDocument timexesDocument = new TimexesDocument(timexesXml);
        PlaceMakerDocument placeMakerDocument = new PlaceMakerDocument(placeMakerDocumentXml);
        init(document,timexesDocument,placeMakerDocument);
    }



    public void init(NyTimesDocument document,  TimexesDocument timexesdocument, PlaceMakerDocument placeMakerDocument)
    {

        this.document = document;
        this.text = document.getSgmlWithoutTags();
        placemakerTemporalSentences = (List<PlaceMakerAndTemporalSentence>) SentenceSpliter.split(text, PlaceMakerAndTemporalSentence.class);
        this.timexesDocument = timexesdocument;
        this.placeMakerDocument = placeMakerDocument;

        if(timexesdocument != null && timexesdocument.getRefTime() != null)
        {
            documentDate = timexesdocument.getRefTime();
            if(!documentDate.getNormalizedExpression().equals(String.format("%04d%02d%02d",document.getArticleYear(),document.getArticleMonth(), document.getArticleDay())))
                logger.error("Document: " + document.getDId() +  "Atention ref date deferent from date formated");
        }
        else
        {
            try {
                documentDate = new TimeExpression(String.format("%04d%02d%02d",document.getArticleYear(),document.getArticleMonth(), document.getArticleDay()));
            } catch (TimeExpression.BadTimeExpression badTimeExpression) {
                logger.error("IMPOSSIBLE error - Document date in ID is wrong");
            }
        }


        PlaceMakerAndTemporalSentence sentence0 = placemakerTemporalSentences.get(0);
        int indexOfLineFeedFirstLine = sentence0.getPhrase().indexOf("\n");

        //Lets see if first line start with a DATE
        if(sentence0.getPhrase().substring(0,indexOfLineFeedFirstLine).matches("[0-9]{4,4}-[0-9]{1,2}-[0-9]{1,2}"))
        {
            sentence0.setPhrase(sentence0.getPhrase().substring(indexOfLineFeedFirstLine));
        }

        if(placeMakerDocument != null && placeMakerDocument.getPlaceDetails() != null && placeMakerDocument.getPlaceDetails().size() > 0)
        {
            for(PlaceMakerDocument.PlaceDetails placeDetails : placeMakerDocument.getPlaceDetails())
            {
                if(placeDetails.getRefs() != null)
                {
                    for(PlaceMakerDocument.PlaceRef placeRef : placeDetails.getRefs())
                    {
                        int startOffset = document.toStringOffset2txtwithoutTagsOffset(placeRef.getStartOffset());
                        //todo meter as place nas geotemporalsentences
                        for(PlaceMakerAndTemporalSentence placeMakerAndTemporalSentence : placemakerTemporalSentences)
                        {
                            if(startOffset >= placeMakerAndTemporalSentence.getStartOffset() && startOffset < placeMakerAndTemporalSentence.getEndOffset())
                            {
                                placeMakerAndTemporalSentence.getPlaceRefs().add(placeRef);
                                break;
                            }
                        }
                    }
                }
            }
        }
        if(this.timexesDocument != null && this.timexesDocument.getTimex2TimeExpressions() != null && this.timexesDocument.getTimex2TimeExpressions().size()>0)
        {
            Iterator<Timex2TimeExpression> timex2timexprsIter = this.timexesDocument.getTimex2TimeExpressions().iterator();

            if(timex2timexprsIter.hasNext())
            {
                Timex2TimeExpression timex2TimeExpressionsList = timex2timexprsIter.next();

                if(placemakerTemporalSentences != null)
                {
                    for(PlaceMakerAndTemporalSentence temporalSentence : placemakerTemporalSentences)
                    {
                        while(timex2TimeExpressionsList.getTimeExpressions().size() == 0)
                        {
                            if(timex2timexprsIter.hasNext())
                                timex2TimeExpressionsList = timex2timexprsIter.next();
                            else
                            {
                                timex2TimeExpressionsList = null;
                                break;
                            }
                        }
                        if(timex2TimeExpressionsList == null)
                            break;
                        if(timex2TimeExpressionsList.getStartOffset() >= temporalSentence.getEndOffset())
                        {
                            //go to next sentence
                        }
                        else
                        {
                            while(timex2TimeExpressionsList.getStartOffset() >= temporalSentence.getStartOffset() && timex2TimeExpressionsList.getEndOffset() <= temporalSentence.getEndOffset())
                            {
                                temporalSentence.getTimexes().add(timex2TimeExpressionsList);
                                if(timex2timexprsIter.hasNext())
                                    timex2TimeExpressionsList = timex2timexprsIter.next();
                                else
                                {
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
    }


    public TimeExpression getDocumentDate() {
        return documentDate;
    }

    public List<Timex2TimeExpression> getTimex2TimeExpressionsSets() {
        return timexesDocument.getTimex2TimeExpressions();
    }

    /**
     *
     * @return found sentences with temporal expressions
     */
    public List<PlaceMakerAndTemporalSentence> getSentences()
    {
        return placemakerTemporalSentences;
    }


    public List<TimeExpression> getAllNormalizedTimeExpressions()
    {
        if(placemakerTemporalSentences != null && placemakerTemporalSentences.size()>0)
        {
            List<TimeExpression> expressions = new ArrayList<TimeExpression>();
            for(PlaceMakerAndTemporalSentence s: placemakerTemporalSentences)
                expressions.addAll(s.getAllTimeExpressions());
            return expressions;
        }
        else
            logger.error("Document with 0 sentences");
        return null;
    }

    public List<String> getAllNLTimeExpressions()
    {
        if(placemakerTemporalSentences != null && placemakerTemporalSentences.size()>0)
        {
            List<String> expressions = new ArrayList<String>();
            for(PlaceMakerAndTemporalSentence s: placemakerTemporalSentences)
                expressions.addAll(s.getAllNLExpressions());
            return expressions;
        }
        else
            logger.error("Document with 0 sentences");
        return null;
    }


    public NyTimesDocument getDocument() {
        return document;
    }

    /**
     *
     * @return TEXT without tags
     */
    public String getText() {
        return text;
    }

    public String toString()
    {
        String txt = "REFTIME: " + timexesDocument.getRefTime() +"\n";
        for(PlaceMakerAndTemporalSentence s: getSentences())
        {
            txt += s;
        }
        return txt;
    }
}
